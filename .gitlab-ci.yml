stages:
    - pre-build
    - build
    - container-build
    - deploy
    - linting
    - test
    - audit

include:
  - template: Jobs/SAST.gitlab-ci.yml

variables:
    SAST_EXCLUDED_PATHS: spec,test,tests,tmp,companion_app

.cache0: &npm-cache
    key: $CI_COMMIT_REF_SLUG-npm
    paths:
        - backend/node_modules/
        - frontend/node_modules/
        - docs/node_modules/
    policy: pull

install_npm_dependencies:
    image: ${DOCKER_CACHE}/node:18
    stage: pre-build
    cache:
        <<: *npm-cache
        policy: pull-push
    script:
        - cd backend
        - yarn
        - cd ../frontend
        - npm i
        - cd ../docs
        - npm i

check_licenses:
    image: ${DOCKER_CACHE}/node:18-alpine
    stage: audit
    artifacts:
        untracked: false
        expire_in: 1 day
        paths:
            - frontend/licenses.json
            - backend/licenses.json
    needs:
        - install_npm_dependencies
    cache:
        <<: *npm-cache
    script:
        - cd backend
        - yarn run licenses
        - cd ../frontend
        - npm run licenses

sonarqube-check:
  stage: audit
  image: 
    name: ${DOCKER_CACHE}/sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  needs: []
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" 
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - v2

build_backend:
    image: ${DOCKER_CACHE}/node:18
    stage: build
    needs:
        - install_npm_dependencies
    artifacts:
        untracked: false
        expire_in: 1 day
        paths:
            - backend/dist
    cache:
        <<: *npm-cache
    script:
        - cd backend
        - npx prisma generate
        - yarn run build

build_frontend:
    image: ${DOCKER_CACHE}/node:18
    stage: build
    needs:
        - install_npm_dependencies
    artifacts:
        untracked: false
        expire_in: 1 day
        paths:
            - frontend/dist
    cache:
        <<: *npm-cache
    script:
        - cd frontend
        - npm run build

build_docs:
    image: ${DOCKER_CACHE}/node:18
    stage: build
    needs:
        - install_npm_dependencies
    artifacts:
        untracked: false
        expire_in: 1 day
        paths:
            - docs/build
    cache:
        <<: *npm-cache
    script:
        - cd docs
        - npm run build

build_backend_container:
    stage: container-build
    needs:
        - build_backend
    image:
        name: "gcr.io/kaniko-project/executor:debug"
        entrypoint: [""]
    script:
        - cp CHANGELOG.md backend/assets/CHANGELOG.md
        - export CI_COMMIT_TAG=${CI_COMMIT_TAG:-${CI_COMMIT_REF_SLUG}}
        - mkdir -p /kaniko/.docker
        - echo "{\"auths\":{\"registry.cdev.nexus\":{\"auth\":\"$(printf "%s:%s" "${PRIVATE_REG_USER}" "${PRIVATE_REG_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
        - >-
            /kaniko/executor
            --context "${CI_PROJECT_DIR}/backend"
            --build-arg "BUILD_VERSION=${CI_COMMIT_TAG}"
            --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
            --destination "registry.cdev.nexus/booklify-ce/backend:${CI_COMMIT_TAG}"

build_frontend_container:
    stage: container-build
    needs:
        - build_frontend
    image:
        name: "gcr.io/kaniko-project/executor:debug"
        entrypoint: [""]
    script:
        - export CI_COMMIT_TAG=${CI_COMMIT_TAG:-${CI_COMMIT_REF_SLUG}}
        - mkdir -p /kaniko/.docker
        - echo "{\"auths\":{\"registry.cdev.nexus\":{\"auth\":\"$(printf "%s:%s" "${PRIVATE_REG_USER}" "${PRIVATE_REG_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
        - >-
            /kaniko/executor
            --context "${CI_PROJECT_DIR}/frontend"
            --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
            --destination "registry.cdev.nexus/booklify-ce/frontend:${CI_COMMIT_TAG}"

build_docs_container:
    stage: container-build
    needs:
        - build_docs
    image:
        name: "gcr.io/kaniko-project/executor:debug"
        entrypoint: [""]
    script:
        - export CI_COMMIT_TAG=${CI_COMMIT_TAG:-${CI_COMMIT_REF_SLUG}}
        - mkdir -p /kaniko/.docker
        - echo "{\"auths\":{\"registry.cdev.nexus\":{\"auth\":\"$(printf "%s:%s" "${PRIVATE_REG_USER}" "${PRIVATE_REG_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
        - >-
            /kaniko/executor
            --context "${CI_PROJECT_DIR}/docs"
            --dockerfile "${CI_PROJECT_DIR}/docs/Dockerfile"
            --destination "registry.cdev.nexus/booklify-ce/docs:${CI_COMMIT_TAG}"

backend_prettier:
    image: ${DOCKER_CACHE}/node:18-alpine
    stage: linting
    needs:
        - install_npm_dependencies
    cache:
        <<: *npm-cache
    script:
        - cd backend
        - yarn run format:check

backend_lint:
    image: ${DOCKER_CACHE}/node:18-alpine
    stage: linting
    needs:
        - install_npm_dependencies
    cache:
        <<: *npm-cache
    script:
        - cd backend
        - yarn run lint

frontend_prettier:
    image: ${DOCKER_CACHE}/node:18-alpine
    stage: linting
    needs:
        - install_npm_dependencies
    cache:
        <<: *npm-cache
    script:
        - cd frontend
        - yarn run format:check

frontend_lint:
    image: ${DOCKER_CACHE}/node:18-alpine
    stage: linting
    needs:
        - install_npm_dependencies
    cache:
        <<: *npm-cache
    script:
        - cd frontend
        - yarn run lint

deploy_docs:
    stage: deploy
    image:
        name: registry.cdev.nexus/devops/kubernetes:latest
        entrypoint: [""]
    only:
        - v2
    needs:
        - build_docs_container
    script:
        - helm uninstall booklify --namespace booklify-docs || true
        - helm upgrade --install --atomic --debug booklify ./docs/deployment
          --values ./docs/deployment/values.yaml
          --namespace booklify-docs

nodejs-scan-sast:
    needs:
        - install_npm_dependencies

semgrep-sast:
    needs: []

spotbugs-sast:
    needs: []
    rules:
        - when: never

flawfinder-sast:
    needs: []
