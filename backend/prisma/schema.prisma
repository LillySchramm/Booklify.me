// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "nativeDistinct"]
  binaryTargets   = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BookStatus {
  NONE
  OWNED
}

model User {
  id        String  @id @default(uuid())
  name      String  @unique
  email     String  @unique
  password  String
  activated Boolean @default(false)
  banned    Boolean @default(false)

  agreedTosAt     DateTime?
  agreedPrivacyAt DateTime?

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Session              Session[]
  VerificationEmail    VerificationEmail[]
  PasswordResetRequest PasswordResetRequest[]
  OwnershipStatus      OwnershipStatus[]
  BookGroup            BookGroup[]
  UserFlags            UserFlags?

  SentReports     Report[] @relation("ReportSender")
  ReceivedReports Report[] @relation("ReportTarget")
}

model UserFlags {
  userId String @id @unique
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  lastAppliedGrouperVersion    Int     @default(0)
  public                       Boolean @default(true)
  lastNotifiedChangelogVersion String  @default("0")
  changelogNotificationEnabled Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model VerificationEmail {
  id          String  @id @default(uuid())
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  invalidated Boolean @default(false)
  keyHash     String

  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Session {
  id           String  @id @default(uuid())
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  permanent    Boolean @default(false)
  refreshToken String?
  invalidated  Boolean @default(false)
  name         String  @default("")

  createdAt DateTime  @default(now())
  lastUsed  DateTime? @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@index([id])
  @@index([invalidated])
  @@index([userId])
}

model Book {
  isbn             String            @id
  title            String?
  subtitle         String?
  authors          Author[]
  publisher        Publisher?        @relation(fields: [publisherId], references: [id])
  publishedDate    String?
  description      String?
  pageCount        Int?
  series           String?
  printedPageCount Int?
  language         String?
  cover            BookCover?        @relation(fields: [bookCoverId], references: [id])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  publisherId      String?
  bookCoverId      String?
  OwnershipStatus  OwnershipStatus[]
  BookFlags        BookFlags?

  @@index([bookCoverId])
}

model BookFlags {
  bookIsbn String @id @unique
  Book     Book   @relation(fields: [bookIsbn], references: [isbn])

  recrawlCover      Boolean @default(false)
  recrawlInfo       Boolean @default(false)
  recrawlLongruning Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model BookCover {
  id String @id @default(uuid())

  origin String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Book      Book[]
}

model Author {
  id    String @id @default(uuid())
  name  String @unique
  books Book[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Publisher {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Book      Book[]
}

model OwnershipStatus {
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  book   Book       @relation(fields: [bookIsbn], references: [isbn], onDelete: Cascade)
  status BookStatus
  group  BookGroup? @relation(fields: [bookGroupId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  userId      String
  bookIsbn    String
  bookGroupId String?
  hidden      Boolean  @default(false)
  noGroup     Boolean  @default(false)

  @@id([userId, bookIsbn])
  @@index([status])
}

model Secret {
  id         Int    @id @default(autoincrement())
  identifier String @unique
  value      String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model BookGroup {
  id              String            @id @default(uuid())
  name            String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  OwnershipStatus OwnershipStatus[]
  userId          String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MailLog {
  id String @id

  from    String
  to      String
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PasswordResetRequest {
  id          String  @id @default(uuid())
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  invalidated Boolean @default(false)
  keyHash     String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String
}

enum MetadataProvider {
  GOOGLE_BOOKS
  OPEN_LIBRARY
  ISBNDB
  AMAZON
}

model MetadataResponse {
  id           Int              @id @default(autoincrement())
  provider     MetadataProvider
  isbn         String
  url          String
  responseCode Int
  body         String?
  createdAt    DateTime         @default(now())
}

model Moderator {
  id    Int    @id @default(autoincrement())
  email String
}

enum ReportCategory {
  USERNAME
  OTHER
}

model Report {
  id String @id @default(uuid())

  sender User @relation(fields: [senderId], references: [id], name: "ReportSender")
  target User @relation(fields: [targetId], references: [id], name: "ReportTarget")

  key String

  category          ReportCategory
  alternateCategory String?
  message           String

  resolved Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  senderId  String
  targetId  String
}
