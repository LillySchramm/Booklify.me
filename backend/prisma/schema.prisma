// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BookStatus {
  NONE
  OWNED
}

model User {
  id        String  @id @default(uuid())
  name      String  @unique
  email     String  @unique
  password  String
  activated Boolean @default(false)

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Session              Session[]
  VerificationEmail    VerificationEmail[]
  PasswordResetRequest PasswordResetRequest[]
  OwnershipStatus      OwnershipStatus[]
  BookGroup            BookGroup[]
}

model VerificationEmail {
  id          String  @id @default(uuid())
  user        User    @relation(fields: [userId], references: [id])
  invalidated Boolean @default(false)
  keyHash     String

  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Session {
  id           String  @id @default(uuid())
  user         User    @relation(fields: [userId], references: [id])
  userId       String
  permanent    Boolean @default(false)
  refreshToken String?
  invalidated  Boolean @default(false)
  name         String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([id])
  @@index([invalidated])
  @@index([userId])
}

model Book {
  isbn             String            @id
  title            String?
  subtitle         String?
  authors          Author[]
  publisher        Publisher?        @relation(fields: [publisherId], references: [id])
  publishedDate    String?
  description      String?
  pageCount        Int?
  printedPageCount Int?
  language         String?
  cover            BookCover?        @relation(fields: [bookCoverId], references: [id])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  publisherId      String?
  bookCoverId      String?
  OwnershipStatus  OwnershipStatus[]
}

model BookCover {
  id String @id @default(uuid())

  origin String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Book      Book[]
}

model Author {
  id    String @id @default(uuid())
  name  String @unique
  books Book[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Publisher {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Book      Book[]
}

model OwnershipStatus {
  user   User       @relation(fields: [userId], references: [id])
  book   Book       @relation(fields: [bookIsbn], references: [isbn])
  status BookStatus
  group  BookGroup? @relation(fields: [bookGroupId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  userId      String
  bookIsbn    String
  bookGroupId String?

  @@id([userId, bookIsbn])
  @@index([status])
}

model Secret {
  id         Int    @id @default(autoincrement())
  identifier String @unique
  value      String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model BookGroup {
  id              String            @id @default(uuid())
  name            String
  user            User              @relation(fields: [userId], references: [id])
  OwnershipStatus OwnershipStatus[]
  userId          String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MailLog {
  id String @id

  from    String
  to      String
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PasswordResetRequest {
  id          String  @id @default(uuid())
  user        User    @relation(fields: [userId], references: [id])
  invalidated Boolean @default(false)
  keyHash     String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String
}

// model OwnershipStatus {
//   user   User       @relation(fields: [userId], references: [id])
//   book   Book       @relation(fields: [bookIsbn], references: [isbn])
//   status BookStatus

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    String
//   bookIsbn  String

//   @@id([userId, bookIsbn])
// }

// model Snapshot {
//   id          String              @id @default(uuid())
//   user        User                @relation(fields: [userId], references: [id])
//   bookGroups  SnapshotBookGroup[]
//   ttl         BigInt?
//   invalidated Boolean             @default(false)

//   createdAt DateTime @default(now())
//   userId    String
// }

// model SnapshotBookGroup {
//   id         String    @id @default(uuid())
//   books      Book[]
//   name       String
//   Snapshot   Snapshot? @relation(fields: [snapshotId], references: [id])
//   snapshotId String?
// }

// model BookGroup {
//   id    String @id @default(uuid())
//   user  User   @relation(fields: [userId], references: [id])
//   books Book[]
//   name  String

//   canBeDeleted Boolean @default(true)

//   userId String

//   createdAt DateTime @default(now())
// }
